modelBaseINLALF <- ACData %>%
inla(deaths ~ 1 + I(year-2015) + as.factor(month)
+ f(FIPSID, model="bym", graph = inla.graph),
data = .,
E = pop,
family = "poisson",
control.compute=list(config = TRUE))
# Loading necessary packages
library(lubridate)
library(USAboundaries)
library(sf)
library(spdep)
library(lme4)
library(INLA)
library(here)
library(tidyverse)
rm(list=ls())
here::i_am('R/modelsFitMonthly.Rmd')
inDir <- here::here('data','input')
outDir <- here::here('data','output')
ACData <- tibble(arrow::read_feather(here::here(outDir,'ACData.feather')))
ACData <- ACData %>% filter(year>2014)
counties <- us_counties()
# Transform to Albers for making map of US
counties <- st_transform(counties, 5070)
counties <- counties %>%
select(geoid,geometry) %>%
rename(FIPSCode = geoid) %>%
mutate(FIPSCode = case_when(FIPSCode == '02013' ~ '02010',
FIPSCode == '02188' ~ '02140',
FIPSCode == '02230' ~ '02232',
FIPSCode == '02063' ~ '02261',
TRUE ~ FIPSCode)) %>%
filter(FIPSCode %in% unique(ACData %>% pull(FIPSCode))) %>%
arrange(FIPSCode)
neighbors <- poly2nb(counties)
nb2INLA(here::here(outDir,'neighbors.graph'),neighbors)
inla.graph <- inla.read.graph(here::here(outDir,'neighbors.graph'))
adj.matrix <- inla.graph2matrix(inla.graph)
CDRMean <- mean(ACData %>% filter(year<2020) %>% pull(CDR),na.rm=T)
CDRSD <- sd(ACData %>% filter(year<2020) %>% pull(CDR),na.rm=T)
ACData <- ACData %>%
group_by(FIPSCode) %>%
mutate(FIPSCode = cur_group_id()) %>%
ungroup() %>%
group_by(csCode) %>%
mutate(csCode = cur_group_id(),
csCode2 = csCode) %>%
ungroup() %>%
group_by(stateFIPS) %>%
mutate(stateFIPS = cur_group_id()) %>%
ungroup() %>%
mutate(CDR = if_else(year>2019,NA_real_,CDR),
deathsCensored = if_else(year>2018,NA_integer_,deaths),
CDRNorm = (CDR - CDRMean)/CDRSD) %>%
arrange(FIPSCode,year,month)
save(CDRMean,CDRSD,file = here::here('R','RObjects','standParams.RData'))
# Function to compute the Root Mean Squared Error (RMSE) between two series
RMSE <- function(series1,series2) {
return(sqrt(mean((series1 - series2)^2,na.rm=T)))
}
# We estimate the base model with random intercepts for each county,
# fixed-effects for months and a linear time trend
modelBaseLT <- ACData %>%
filter(year>2014,year<2019) %>%
lmer(CDRNorm ~ 1 + I(year-2015) + as.factor(month) + (1 | FIPSCode),
data= .)
# We estimate the base model with random intercepts for each county,
# fixed-effects for months and a linear time trend
modelBaseLF <- ACData %>%
filter(year>2014,year<2020) %>%
lmer(CDRNorm ~ 1 + I(year-2015) + as.factor(month) + (1 | FIPSCode),
data= .)
# We re-estimated the last model with INLA so that we can use it to
# build posterior intervals for the predictions.
modelBaseINLALF <- ACData %>%
inla(deaths ~ 1 + I(year-2015) + as.factor(month)
+ f(FIPSCode, model="bym", graph = inla.graph),
data = .,
E = pop,
family = "poisson",
control.compute=list(config = TRUE))
# Note: INLA is a bit tricky, error messages are not very informative.
# Loading necessary packages
library(lubridate)
library(USAboundaries)
library(sf)
library(spdep)
library(lme4)
library(INLA)
library(here)
library(tidyverse)
rm(list=ls())
here::i_am('R/modelsFitMonthly.Rmd')
inDir <- here::here('data','input')
outDir <- here::here('data','output')
ACData <- tibble(arrow::read_feather(here::here(outDir,'ACData.feather')))
ACData <- ACData %>% filter(year>2014)
counties <- us_counties()
# Transform to Albers for making map of US
counties <- st_transform(counties, 5070)
counties <- counties %>%
select(geoid,geometry) %>%
rename(FIPSCode = geoid) %>%
mutate(FIPSCode = case_when(FIPSCode == '02013' ~ '02010',
FIPSCode == '02188' ~ '02140',
FIPSCode == '02230' ~ '02232',
FIPSCode == '02063' ~ '02261',
TRUE ~ FIPSCode)) %>%
filter(FIPSCode %in% unique(ACData %>% pull(FIPSCode))) %>%
arrange(FIPSCode)
neighbors <- poly2nb
# We link all Alaska counties together
#alaskaFIPSIDs <- ACData %>% filter(state=='Alaska') %>% distinct(FIPSID) %>% pull(FIPSID)
#neighbors[alaskaFIPSIDs] <- rep(list(alaskaFIPSIDs),length(alaskaFIPSIDs))
neighbors[[68]] <- as.integer(c(69,70))
neighbors[[68]]
neighbors[68]
neighbors <- poly2nb(counties)
neighbors[[68]] <- as.integer(c(69,70))
neighbors[[71]] <-  as.integer(c(69,70))
nb2INLA(here::here(outDir,'neighbors.graph'),neighbors)
inla.graph <- inla.read.graph(here::here(outDir,'neighbors.graph'))
adj.matrix <- inla.graph2matrix(inla.graph)
CDRMean <- mean(ACData %>% filter(year<2020) %>% pull(CDR),na.rm=T)
CDRSD <- sd(ACData %>% filter(year<2020) %>% pull(CDR),na.rm=T)
ACData <- ACData %>%
group_by(FIPSCode) %>%
mutate(FIPSCode = cur_group_id()) %>%
ungroup() %>%
group_by(csCode) %>%
mutate(csCode = cur_group_id(),
csCode2 = csCode) %>%
ungroup() %>%
group_by(stateFIPS) %>%
mutate(stateFIPS = cur_group_id()) %>%
ungroup() %>%
mutate(CDR = if_else(year>2019,NA_real_,CDR),
deathsCensored = if_else(year>2018,NA_integer_,deaths),
CDRNorm = (CDR - CDRMean)/CDRSD) %>%
arrange(FIPSCode,year,month)
# Loading necessary packages
library(lubridate)
library(USAboundaries)
library(sf)
library(spdep)
library(lme4)
library(INLA)
library(here)
library(tidyverse)
rm(list=ls())
here::i_am('R/modelsFitMonthly.Rmd')
inDir <- here::here('data','input')
outDir <- here::here('data','output')
ACData <- tibble(arrow::read_feather(here::here(outDir,'ACData.feather')))
ACData <- ACData %>% filter(year>2014)
counties <- us_counties()
# Transform to Albers for making map of US
counties <- st_transform(counties, 5070)
counties <- counties %>%
select(geoid,geometry) %>%
rename(FIPSCode = geoid) %>%
mutate(FIPSCode = case_when(FIPSCode == '02013' ~ '02010',
FIPSCode == '02188' ~ '02140',
FIPSCode == '02230' ~ '02232',
FIPSCode == '02063' ~ '02261',
TRUE ~ FIPSCode)) %>%
filter(FIPSCode %in% unique(ACData %>% pull(FIPSCode))) %>%
arrange(FIPSCode)
neighbors <- poly2nb(counties)
neighbors[[68]] <- as.integer(c(69,70))
neighbors[[71]] <-  as.integer(c(69,70))
nb2INLA(here::here(outDir,'neighbors.graph'),neighbors)
inla.graph <- inla.read.graph(here::here(outDir,'neighbors.graph'))
adj.matrix <- inla.graph2matrix(inla.graph)
CDRMean <- mean(ACData %>% filter(year<2020) %>% pull(CDR),na.rm=T)
CDRSD <- sd(ACData %>% filter(year<2020) %>% pull(CDR),na.rm=T)
ACData <- ACData %>%
group_by(FIPSCode) %>%
mutate(FIPSCode = cur_group_id()) %>%
ungroup() %>%
group_by(csCode) %>%
mutate(csCode = cur_group_id(),
csCode2 = csCode) %>%
ungroup() %>%
group_by(stateFIPS) %>%
mutate(stateFIPS = cur_group_id()) %>%
ungroup() %>%
mutate(CDR = if_else(year>2019,NA_real_,CDR),
deathsCensored = if_else(year>2018,NA_integer_,deaths),
CDRNorm = (CDR - CDRMean)/CDRSD) %>%
arrange(FIPSCode,year,month)
save(CDRMean,CDRSD,file = here::here('R','RObjects','standParams.RData'))
# Function to compute the Root Mean Squared Error (RMSE) between two series
RMSE <- function(series1,series2) {
return(sqrt(mean((series1 - series2)^2,na.rm=T)))
}
# We estimate the base model with random intercepts for each county,
# fixed-effects for months and a linear time trend
modelBaseLT <- ACData %>%
filter(year>2014,year<2019) %>%
lmer(CDRNorm ~ 1 + I(year-2015) + as.factor(month) + (1 | FIPSCode),
data= .)
# We estimate the base model with random intercepts for each county,
# fixed-effects for months and a linear time trend
modelBaseLF <- ACData %>%
filter(year>2014,year<2020) %>%
lmer(CDRNorm ~ 1 + I(year-2015) + as.factor(month) + (1 | FIPSCode),
data= .)
# We re-estimated the last model with INLA so that we can use it to
# build posterior intervals for the predictions.
modelBaseINLALF <- ACData %>%
inla(deaths ~ 1 + I(year-2015) + as.factor(month)
+ f(FIPSCode, model="bym", graph = inla.graph),
data = .,
E = pop,
family = "poisson",
control.compute=list(config = TRUE))
class(neighbors)
summary(neighbors)
adj.matrix[68,69]
adj.matrix[68,67]
neighbors[[67]]
neighbors[[68]]
neighbors[[70]]
neighbors <- poly2nb(counties)
neighbors[[68]] <- neighbors[[70]]
neighbors[[71]] <- neighbors[[70]]
nb2INLA(here::here(outDir,'neighbors.graph'),neighbors)
inla.graph <- inla.read.graph(here::here(outDir,'neighbors.graph'))
adj.matrix <- inla.graph2matrix(inla.graph)
# Loading necessary packages
library(lubridate)
library(USAboundaries)
library(sf)
library(spdep)
library(lme4)
library(INLA)
library(here)
library(tidyverse)
rm(list=ls())
here::i_am('R/modelsFitMonthly.Rmd')
inDir <- here::here('data','input')
outDir <- here::here('data','output')
ACData <- tibble(arrow::read_feather(here::here(outDir,'ACData.feather')))
ACData <- ACData %>% filter(year>2014)
counties <- us_counties()
# Transform to Albers for making map of US
counties <- st_transform(counties, 5070)
counties <- counties %>%
select(geoid,geometry) %>%
rename(FIPSCode = geoid) %>%
mutate(FIPSCode = case_when(FIPSCode == '02013' ~ '02010',
FIPSCode == '02188' ~ '02140',
FIPSCode == '02230' ~ '02232',
FIPSCode == '02063' ~ '02261',
TRUE ~ FIPSCode)) %>%
filter(FIPSCode %in% unique(ACData %>% pull(FIPSCode))) %>%
arrange(FIPSCode)
neighbors <- poly2nb(counties)
neighbors[[68]] <- neighbors[[70]]
neighbors[[71]] <- neighbors[[70]]
nb2INLA(here::here(outDir,'neighbors.graph'),neighbors)
inla.graph <- inla.read.graph(here::here(outDir,'neighbors.graph'))
adj.matrix <- inla.graph2matrix(inla.graph)
CDRMean <- mean(ACData %>% filter(year<2020) %>% pull(CDR),na.rm=T)
CDRSD <- sd(ACData %>% filter(year<2020) %>% pull(CDR),na.rm=T)
ACData <- ACData %>%
group_by(FIPSCode) %>%
mutate(FIPSCode = cur_group_id()) %>%
ungroup() %>%
group_by(csCode) %>%
mutate(csCode = cur_group_id(),
csCode2 = csCode) %>%
ungroup() %>%
group_by(stateFIPS) %>%
mutate(stateFIPS = cur_group_id()) %>%
ungroup() %>%
mutate(CDR = if_else(year>2019,NA_real_,CDR),
deathsCensored = if_else(year>2018,NA_integer_,deaths),
CDRNorm = (CDR - CDRMean)/CDRSD) %>%
arrange(FIPSCode,year,month)
save(CDRMean,CDRSD,file = here::here('R','RObjects','standParams.RData'))
# Function to compute the Root Mean Squared Error (RMSE) between two series
RMSE <- function(series1,series2) {
return(sqrt(mean((series1 - series2)^2,na.rm=T)))
}
# We estimate the base model with random intercepts for each county,
# fixed-effects for months and a linear time trend
modelBaseLT <- ACData %>%
filter(year>2014,year<2019) %>%
lmer(CDRNorm ~ 1 + I(year-2015) + as.factor(month) + (1 | FIPSCode),
data= .)
# We estimate the base model with random intercepts for each county,
# fixed-effects for months and a linear time trend
modelBaseLF <- ACData %>%
filter(year>2014,year<2020) %>%
lmer(CDRNorm ~ 1 + I(year-2015) + as.factor(month) + (1 | FIPSCode),
data= .)
# We re-estimated the last model with INLA so that we can use it to
# build posterior intervals for the predictions.
modelBaseINLALF <- ACData %>%
inla(deaths ~ 1 + I(year-2015) + as.factor(month)
+ f(FIPSCode, model="bym", graph = inla.graph),
data = .,
E = pop,
family = "poisson",
control.compute=list(config = TRUE))
# Loading necessary packages
library(lubridate)
library(USAboundaries)
library(sf)
library(spdep)
library(lme4)
library(INLA)
library(here)
library(tidyverse)
rm(list=ls())
here::i_am('R/modelsFitMonthly.Rmd')
inDir <- here::here('data','input')
outDir <- here::here('data','output')
ACData <- tibble(arrow::read_feather(here::here(outDir,'ACData.feather')))
ACData <- ACData %>% filter(year>2014)
counties <- us_counties()
# Transform to Albers for making map of US
counties <- st_transform(counties, 5070)
counties <- counties %>%
select(geoid,geometry) %>%
rename(FIPSCode = geoid) %>%
mutate(FIPSCode = case_when(FIPSCode == '02013' ~ '02010',
FIPSCode == '02188' ~ '02140',
FIPSCode == '02230' ~ '02232',
FIPSCode == '02063' ~ '02261',
TRUE ~ FIPSCode)) %>%
filter(FIPSCode %in% unique(ACData %>% pull(FIPSCode))) %>%
arrange(FIPSCode)
neighbors <- poly2nb(counties)
neighbors[[68]] <- neighbors[[70]]
neighbors[[71]] <- neighbors[[70]]
neighbors[[70]] <- sort(as.integer(c(neighbors[[70]], 68, 71)))
nb2INLA(here::here(outDir,'neighbors.graph'),neighbors)
inla.graph <- inla.read.graph(here::here(outDir,'neighbors.graph'))
adj.matrix <- inla.graph2matrix(inla.graph)
neighbors[[70]]
# Loading necessary packages
library(lubridate)
library(USAboundaries)
library(sf)
library(spdep)
library(lme4)
library(INLA)
library(here)
library(tidyverse)
rm(list=ls())
here::i_am('R/modelsFitMonthly.Rmd')
inDir <- here::here('data','input')
outDir <- here::here('data','output')
ACData <- tibble(arrow::read_feather(here::here(outDir,'ACData.feather')))
ACData <- ACData %>% filter(year>2014)
counties <- us_counties()
# Transform to Albers for making map of US
counties <- st_transform(counties, 5070)
counties <- counties %>%
select(geoid,geometry) %>%
rename(FIPSCode = geoid) %>%
mutate(FIPSCode = case_when(FIPSCode == '02013' ~ '02010',
FIPSCode == '02188' ~ '02140',
FIPSCode == '02230' ~ '02232',
FIPSCode == '02063' ~ '02261',
TRUE ~ FIPSCode)) %>%
filter(FIPSCode %in% unique(ACData %>% pull(FIPSCode))) %>%
arrange(FIPSCode)
neighbors <- poly2nb(counties)
neighbors[[68]] <- neighbors[[70]]
neighbors[[71]] <- neighbors[[70]]
neighbors[[70]] <- sort(as.integer(c(neighbors[[70]], 68, 71)))
nb2INLA(here::here(outDir,'neighbors.graph'),neighbors)
inla.graph <- inla.read.graph(here::here(outDir,'neighbors.graph'))
adj.matrix <- inla.graph2matrix(inla.graph)
CDRMean <- mean(ACData %>% filter(year<2020) %>% pull(CDR),na.rm=T)
CDRSD <- sd(ACData %>% filter(year<2020) %>% pull(CDR),na.rm=T)
ACData <- ACData %>%
group_by(FIPSCode) %>%
mutate(FIPSCode = cur_group_id()) %>%
ungroup() %>%
group_by(csCode) %>%
mutate(csCode = cur_group_id(),
csCode2 = csCode) %>%
ungroup() %>%
group_by(stateFIPS) %>%
mutate(stateFIPS = cur_group_id()) %>%
ungroup() %>%
mutate(CDR = if_else(year>2019,NA_real_,CDR),
deathsCensored = if_else(year>2018,NA_integer_,deaths),
CDRNorm = (CDR - CDRMean)/CDRSD) %>%
arrange(FIPSCode,year,month)
save(CDRMean,CDRSD,file = here::here('R','RObjects','standParams.RData'))
# Function to compute the Root Mean Squared Error (RMSE) between two series
RMSE <- function(series1,series2) {
return(sqrt(mean((series1 - series2)^2,na.rm=T)))
}
# We estimate the base model with random intercepts for each county,
# fixed-effects for months and a linear time trend
modelBaseLT <- ACData %>%
filter(year>2014,year<2019) %>%
lmer(CDRNorm ~ 1 + I(year-2015) + as.factor(month) + (1 | FIPSCode),
data= .)
# We estimate the base model with random intercepts for each county,
# fixed-effects for months and a linear time trend
modelBaseLF <- ACData %>%
filter(year>2014,year<2020) %>%
lmer(CDRNorm ~ 1 + I(year-2015) + as.factor(month) + (1 | FIPSCode),
data= .)
# We re-estimated the last model with INLA so that we can use it to
# build posterior intervals for the predictions.
modelBaseINLALF <- ACData %>%
inla(deaths ~ 1 + I(year-2015) + as.factor(month)
+ f(FIPSCode, model="bym", graph = inla.graph),
data = .,
E = pop,
family = "poisson",
control.compute=list(config = TRUE))
neighbors <- poly2nb(counties)
neighbors[[68]] <- as.integer(c(70))
neighbors[[71]] <- as.integer(c(70))
neighbors[[70]] <- sort(as.integer(c(neighbors[[70]], 68, 71)))
nb2INLA(here::here(outDir,'neighbors.graph'),neighbors)
inla.graph <- inla.read.graph(here::here(outDir,'neighbors.graph'))
adj.matrix <- inla.graph2matrix(inla.graph)
neighbors[[68]]
neighbors[[70]]
# Loading necessary packages
library(lubridate)
library(USAboundaries)
library(sf)
library(spdep)
library(lme4)
library(INLA)
library(here)
library(tidyverse)
rm(list=ls())
here::i_am('R/modelsFitMonthly.Rmd')
inDir <- here::here('data','input')
outDir <- here::here('data','output')
ACData <- tibble(arrow::read_feather(here::here(outDir,'ACData.feather')))
ACData <- ACData %>% filter(year>2014)
counties <- us_counties()
# Transform to Albers for making map of US
counties <- st_transform(counties, 5070)
counties <- counties %>%
select(geoid,geometry) %>%
rename(FIPSCode = geoid) %>%
mutate(FIPSCode = case_when(FIPSCode == '02013' ~ '02010',
FIPSCode == '02188' ~ '02140',
FIPSCode == '02230' ~ '02232',
FIPSCode == '02063' ~ '02261',
TRUE ~ FIPSCode)) %>%
filter(FIPSCode %in% unique(ACData %>% pull(FIPSCode))) %>%
arrange(FIPSCode)
neighbors <- poly2nb(counties)
neighbors[[68]] <- as.integer(c(70))
neighbors[[71]] <- as.integer(c(70))
neighbors[[70]] <- sort(as.integer(c(neighbors[[70]], 68, 71)))
nb2INLA(here::here(outDir,'neighbors.graph'),neighbors)
inla.graph <- inla.read.graph(here::here(outDir,'neighbors.graph'))
adj.matrix <- inla.graph2matrix(inla.graph)
CDRMean <- mean(ACData %>% filter(year<2020) %>% pull(CDR),na.rm=T)
CDRSD <- sd(ACData %>% filter(year<2020) %>% pull(CDR),na.rm=T)
ACData <- ACData %>%
group_by(FIPSCode) %>%
mutate(FIPSCode = cur_group_id()) %>%
ungroup() %>%
group_by(csCode) %>%
mutate(csCode = cur_group_id(),
csCode2 = csCode) %>%
ungroup() %>%
group_by(stateFIPS) %>%
mutate(stateFIPS = cur_group_id()) %>%
ungroup() %>%
mutate(CDR = if_else(year>2019,NA_real_,CDR),
deathsCensored = if_else(year>2018,NA_integer_,deaths),
CDRNorm = (CDR - CDRMean)/CDRSD) %>%
arrange(FIPSCode,year,month)
save(CDRMean,CDRSD,file = here::here('R','RObjects','standParams.RData'))
# Function to compute the Root Mean Squared Error (RMSE) between two series
RMSE <- function(series1,series2) {
return(sqrt(mean((series1 - series2)^2,na.rm=T)))
}
# We estimate the base model with random intercepts for each county,
# fixed-effects for months and a linear time trend
modelBaseLT <- ACData %>%
filter(year>2014,year<2019) %>%
lmer(CDRNorm ~ 1 + I(year-2015) + as.factor(month) + (1 | FIPSCode),
data= .)
# We estimate the base model with random intercepts for each county,
# fixed-effects for months and a linear time trend
modelBaseLF <- ACData %>%
filter(year>2014,year<2020) %>%
lmer(CDRNorm ~ 1 + I(year-2015) + as.factor(month) + (1 | FIPSCode),
data= .)
# We re-estimated the last model with INLA so that we can use it to
# build posterior intervals for the predictions.
modelBaseINLALF <- ACData %>%
inla(deaths ~ 1 + I(year-2015) + as.factor(month)
+ f(FIPSCode, model="bym", graph = inla.graph),
data = .,
E = pop,
family = "poisson",
control.compute=list(config = TRUE))
# Note: INLA is a bit tricky, error messages are not very informative.
draws <- inla.posterior.sample(100, modelBaseINLALF)
draws <- inla.posterior.sample(100, modelBaseINLALF)
